import("AssignNames.flow");
import("Math.flow");
import("Utilities.msg");
import("ZealPad.flow");

bool controller;

// Regular text window
void Message(int messageId)
{
    MSG_WND_DSP();
    MSG(messageId);
    MSG_WND_CLS();
}

// System text window
void SystemMessage(int messageId)
{
    MSG_WND_DSP();
    MSG_SYSTEM(messageId);
    MSG_WND_CLS();
}

// System text window with options
int SystemMenu(int messageId, int optionsMsgId)
{
    MSG_WND_DSP();
    MSG_SYSTEM(messageId);
    int selection = SEL(optionsMsgId);
    MSG_WND_CLS();

    return selection;
}

// "What Should I Do?" style menu
int Menu(int optionsMsgId)
{
    int selection = SEL_GENERIC_NOT_HELP(-1, optionsMsgId);
    return selection;
}

// "What Should I Do?" style menu with caption
int NameMenu(int nameMsgId, int optionsMsgId)
{
    int selection = SEL_GENERIC_NOT_HELP(nameMsgId, optionsMsgId);
    return selection;
}

// "What Should I Do?" style menu with caption and descriptions
int DescriptionMenu(int nameMsgId, int optionsMsgId)
{
    int selection = SEL_GENERIC(nameMsgId, optionsMsgId);
    return selection;
}

// "What Should I Do?" style menu with 0-9 digit entry, 
// returns int with a set number of digits
int NumberMenu(int digitCount, int nameMsgId)
{
    //if (controller)
    //{
    //    return InputNumber(digitCount);
    //}
    int number = 0;
    
    for (int i = 0; i < digitCount; i++)
    {
        int digit = NameMenu(nameMsgId, Options_Digits);

        if (digit == -1)
        {
            // Returns -1 if cancelled before any number has been entered
            if (i == 0)
            {
                return -1;
            }
            else
                break;
        }

        number *= 10;
        number += digit;
    }

    PUTS("NumberMenu returned: ");
    PUT(number);

    return number;
}

// Same as above but goes up to 10, only selected once
// with no confirmation. Used for Confidant Rank
int NumberMenuTen()
{
    int selection = Menu(Options_DigitsTen);
    return selection;
}

// "What Should I Do?" style menu with 0-9 digit entry, 
// returns float with decimal value
float FloatMenu()
{
    int i = 0;
    float ipart = 0;
    while (true && !PAD_CHK_PRESS(PadButton.L2))
    {
        float digit = Menu(Options_Digits);

        if (digit == -1)
        {
            // Number should only equal negative one if we cancel
            // before entering anything.
            if (i == 0)
                return -1;
            else
                break;
        }

        ipart *= 10;
        ipart += digit;
        i++;
    }

    i = 0;
    float fpart = 0;
    while (true && !PAD_CHK_PRESS(PadButton.L2))
    {
        float digit = Menu(Options_Digits);

        if (digit == -1)
            break;

        fpart *= 10;
        fpart += digit;
        i++;
    }

    if (ConfirmFloat(ipart, fpart) == 0)
    {
        return -1;
    }

    float number = ipart + (fpart / Pow(10, i));
    return number;
}

int ConfirmNumber(int number)
{
    SET_MSG_VAR(0, number, 0);
    if (SystemMenu(Message_ConfirmNumberInput, Options_YesNo) == 0)
        return 1;
    else
        return 0;

    return -1;
}

int ConfirmFloat(int number, int fractionalPart)
{
    SET_MSG_VAR(0, number, 0);
    SET_MSG_VAR(1, fractionalPart, 0);
    if (SystemMenu(Message_ConfirmFloatInput, Options_YesNo) == 0)
        return 1;
    else
        return 0;

    return -1;
}

// Show XYZ values of player's current translation/rotation in debug log
void PrintPosition()
{
    PUTS("Joker Translation:");
    int pcHandle = FLD_PC_GET_RESHND(0);
    PUTS("X:");
    PUT(FLD_MODEL_GET_X_TRANSLATE(pcHandle));
    PUTS("Y:");
    PUT(FLD_MODEL_GET_Y_TRANSLATE(pcHandle));
    PUTS("Z:");
    PUT(FLD_MODEL_GET_Z_TRANSLATE(pcHandle));

    PUTS("Joker Rotation:");
    PUTS("X:");
    PUT(FLD_MODEL_GET_X_ROTATE(pcHandle));
    PUTS("Y:");
    PUT(FLD_MODEL_GET_Y_ROTATE(pcHandle));
    PUTS("Z:");
    PUT(FLD_MODEL_GET_Z_ROTATE(pcHandle));
}

// Turn a flag on or off (depending on user input, if confirm == true)
void ToggleFlag(int flagId, bool confirm)
{
    // Prevent disabling Mod Menu
    if (flagId != 320 && flagId != 11781)
    {
        // If no confirmation dialog, silently toggle flag
        if (!confirm)
        {
            if (BIT_CHK(flagId))
                BIT_OFF(flagId);
            else
                BIT_ON(flagId);
        }
        else
        {
            // Display flag number and status, ask user whether to turn on or off
            SET_MSG_VAR(0, flagId, 0);
            if (BIT_CHK(flagId) == 1)
            {
                if (SystemMenu(Message_ToggleActiveFlag, Options_OnOff) == 1)
                    BIT_OFF(flagId);
            }
            else if (BIT_CHK(flagId) == 0)
            {
                if (SystemMenu(Message_ToggleInactiveFlag, Options_OnOff) == 0)
                    BIT_ON(flagId);
            }
        }
    }
}

void FlagStatus(int flagId)
{
    SET_MSG_VAR(0, flagId, 0);
    if (BIT_CHK(flagId) == 1)
        SystemMessage(Msg_FlgEnabled);
    else
        SystemMessage(Msg_FlgDisabled);
}

void ReloadCurrentField()
{
    /* Royal Start */
    if (FLD_GET_MAJOR() != 21 && FLD_GET_MINOR() != 1)
    {
        /* Royal End */
        CALL_FIELD(FLD_GET_MAJOR(), FLD_GET_MINOR(), 0, 0);
        /* Royal Start */
    }
    else
    {
        FLD_MY_PALACE_ENTER();
    }
    /* Royal End */
}

void ReloadPreviousField()
{
    if (FLD_GET_MAJOR() != FLD_GET_PREV_MAJOR() || FLD_GET_MINOR() != FLD_GET_PREV_MINOR())
    {
        CALL_FIELD(FLD_GET_PREV_MAJOR(), FLD_GET_PREV_MINOR(), 0, 0);
    }
}

void DetectController()
{
    // Detect controller
    if (!controller)
    {
        controller = PAD_CHK_PRESS(PadButton.Any);
    }
}