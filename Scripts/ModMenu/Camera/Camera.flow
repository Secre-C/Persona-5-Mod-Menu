import("Camera.msg");

// Global Variables
global float rotX;
global float rotY;
global float rotZ;

void CameraMenu()
{
    if ((rotX == 0f) && (rotY == 0f) && (rotZ == 0f))
    {
        CameraGetRotation();
    }

    while (true && !PAD_CHK_PRESS(PadButton.L2))
    {
        int selection = DescriptionMenu(Title_Camera, Options_Camera);

        switch (selection)
        {
            case -1:
                return;
            case 0:
                CameraPosition();
                break;
            case 1:
                CameraFOV();
                break;
            case 2:
                CameraZoom();
                break;
            case 3:
                CameraRotation();
                break;
            case 4:
                CameraUnlock();
                break;
            case 5:
                CameraLock();
                break;
            case 6:
                CAMERA_SHAKE_STOP();
                break;
        }
    }
}

void CameraPosition()
{
    CameraLock();
    SystemMessage(Message_Camera);

    while (!PAD_CHK_PRESS(PadButton.Triangle))
    {
        bool anyValueSet = false;

        if (PAD_CHK_PRESS(PadButton.Any)) // if any button is pressed
        {
            float x = FLD_CAMERA_GET_X_POS();
            float y = FLD_CAMERA_GET_Y_POS();
            float z = FLD_CAMERA_GET_Z_POS();
            float multiplier = 1f;

            if (PAD_CHK_PRESS(PadButton.Cross))
                multiplier = 3f;

            if (PAD_CHK_PRESS(PadButton.Up))
            {
                if (PAD_CHK_PRESS(PadButton.Square))
                    z = z + (5f * multiplier);
                else
                    y = y + (5f * multiplier);
                anyValueSet = true;
            }

            if (PAD_CHK_PRESS(PadButton.Right))
            {
                x = x + (5f * multiplier);
                anyValueSet = true;
            }

            if (PAD_CHK_PRESS(PadButton.Down))
            {
                if (PAD_CHK_PRESS(PadButton.Square))
                    z = z - (5f * multiplier);
                else
                    y = y - (5f * multiplier);
                anyValueSet = true;
            }

            if (PAD_CHK_PRESS(PadButton.Left))
            {
                x = x - (5f * multiplier);
                anyValueSet = true;
            }

            if (anyValueSet)
                FLD_CAMERA_SET_POS(x, y, z);
        }

        WAIT(3);
    }
}

void CameraFOV()
{
    CameraLock();
    SystemMessage(Message_Camera);

    while (!PAD_CHK_PRESS(PadButton.Triangle))
    {
        bool anyValueSet = false;

        if (PAD_CHK_PRESS(PadButton.Any))
        {
            float fov = FLD_CAMERA_GET_FOVY();
            float multiplier = 1f;

            if (PAD_CHK_PRESS(PadButton.Cross))
                multiplier = 5f;

            if (PAD_CHK_PRESS(PadButton.Up))
            {
                fov = fov + (1f * multiplier);
                anyValueSet = true;
            }

            if (PAD_CHK_PRESS(PadButton.Right))
            {
                fov = fov + (1f * multiplier);
                anyValueSet = true;
            }

            if (PAD_CHK_PRESS(PadButton.Down))
            {
                fov = fov - (1f * multiplier);
                anyValueSet = true;
            }

            if (PAD_CHK_PRESS(PadButton.Left))
            {
                fov = fov + (1f * multiplier);
                anyValueSet = true;
            }

            if (anyValueSet)
                FLD_CAMERA_SET_FOVY(fov);
        }

        WAIT(3);
    }
}

void CameraZoom()
{
    CameraLock();
    SystemMessage(Message_Camera);

    while (!PAD_CHK_PRESS(PadButton.Triangle))
    {
        bool anyValueSet = false;

        if (PAD_CHK_PRESS(PadButton.Any))
        {
            int zoom = 1;
            float multiplier = 1f;

            if (PAD_CHK_PRESS(PadButton.Cross))
                multiplier = 5f;

            if (PAD_CHK_PRESS(PadButton.Up))
            {
                zoom = zoom + (1f * multiplier);
                anyValueSet = true;
            }

            if (PAD_CHK_PRESS(PadButton.Right))
            {
                zoom = zoom + (1f * multiplier);
                anyValueSet = true;
            }

            if (PAD_CHK_PRESS(PadButton.Down))
            {
                zoom = zoom - (1f * multiplier);
                anyValueSet = true;
            }

            if (PAD_CHK_PRESS(PadButton.Left))
            {
                zoom = zoom + (1f * multiplier);
                anyValueSet = true;
            }

            if (anyValueSet)
                FLD_CAMERA_ZOOM(zoom);
        }

        WAIT(3);
    }
}

void CameraRotation()
{
    CameraLock();
    const float ADD_VELOCITY_PER_PRESS = 15f;
    float cameraVelocityX = 0f;
    float cameraVelocityY = 0f;
    float cameraVelocityZ = 0f;

    int runs = 0;

    SystemMessage(Message_Camera);
    while (!PAD_CHK_PRESS(PadButton.Triangle))
    {
        if (++runs > 4)
        {
            runs = 0;
            cameraVelocityX /= 2;
            cameraVelocityY /= 2;
            cameraVelocityZ /= 2;
        }

        if (PAD_CHK_PRESS(PadButton.Any))
        {
            if (PAD_CHK_PRESS(PadButton.Up))
            {
                if (PAD_CHK_PRESS(PadButton.Square))
                {
                    cameraVelocityZ += ADD_VELOCITY_PER_PRESS;
                }
                else
                {
                    cameraVelocityY += ADD_VELOCITY_PER_PRESS;
                }
            }

            if (PAD_CHK_PRESS(PadButton.Right))
            {
                cameraVelocityX += ADD_VELOCITY_PER_PRESS;
            }

            if (PAD_CHK_PRESS(PadButton.Down))
            {
                if (PAD_CHK_PRESS(PadButton.Square))
                {
                    cameraVelocityZ -= ADD_VELOCITY_PER_PRESS;
                }
                else
                {
                    cameraVelocityY -= ADD_VELOCITY_PER_PRESS;
                }
            }

            if (PAD_CHK_PRESS(PadButton.Left))
            {
                cameraVelocityX -= ADD_VELOCITY_PER_PRESS;
            }
        }

        rotX += cameraVelocityX;
        rotY += cameraVelocityY;
        rotZ += cameraVelocityZ;
        CameraSetRotation(rotX, rotY, rotZ);

        SYNC();
    }
}

void CameraGetRotation()
{
    float x;
    float y;
    float z;
    QuaternionToEuler(FLD_CAMERA_GET_X_ROT(), FLD_CAMERA_GET_Y_ROT(), FLD_CAMERA_GET_Z_ROT(), FLD_CAMERA_GET_W_ROT(), out x, out y, out z);
    rotX = x;
    rotY = y;
    rotZ = z;
}

void CameraSetRotation(float x, float y, float z)
{
    float qX;
    float qY;
    float qZ;
    float qW;
    EulerToQuaternionDegrees(x, y, z, out float qX, out float qY, out float qZ, out float qW);
    FLD_CAMERA_SET_ROT(qX, qY, qZ, qW);
}

void CameraUnlock()
{
    FLD_CAMERA_UNLOCK();
    FLD_CAMERA_BEHIND_UNLOCK();
}

void CameraLock()
{
    FLD_CAMERA_LOCK();
    FLD_CAMERA_BEHIND_LOCK();
}

void TeleportModeStart()
{
    const float ADD_VELOCITY_PER_PRESS = 5f;

    int playerResHandle = FLD_PC_GET_RESHND(0);

    float playerVelocityX = 0f;
    float playerVelocityY = 0f;
    float playerVelocityZ = 0f;
    int runs = 0;

    while (!PAD_CHK_PRESS(PadButton.Triangle))
    {
        ++runs;
        if (runs > 4)
        {
            runs = 0;
            playerVelocityX /= 2;
            playerVelocityY /= 2;
            playerVelocityZ /= 2;
        }

        if (PAD_CHK_PRESS(PadButton.Any))
        {
            if (PAD_CHK_PRESS(PadButton.Up))
            {
                if (PAD_CHK_PRESS(PadButton.Square))
                    playerVelocityZ += ADD_VELOCITY_PER_PRESS;
                else
                    playerVelocityY += ADD_VELOCITY_PER_PRESS;
            }

            if (PAD_CHK_PRESS(PadButton.Right))
            {
                playerVelocityX += ADD_VELOCITY_PER_PRESS;
            }

            if (PAD_CHK_PRESS(PadButton.Down))
            {
                if (PAD_CHK_PRESS(PadButton.Square))
                    playerVelocityZ -= ADD_VELOCITY_PER_PRESS;
                else
                    playerVelocityY -= ADD_VELOCITY_PER_PRESS;
            }

            if (PAD_CHK_PRESS(PadButton.Left))
            {
                playerVelocityX -= ADD_VELOCITY_PER_PRESS;
            }
        }

        float x = FLD_MODEL_GET_X_TRANSLATE(playerResHandle) + playerVelocityX;
        float y = FLD_MODEL_GET_Y_TRANSLATE(playerResHandle) + playerVelocityY;
        float z = FLD_MODEL_GET_Z_TRANSLATE(playerResHandle) + playerVelocityZ;
        FLD_MODEL_RUN_TRANSLATE(playerResHandle, x, y, z);

        SYNC();
    }
}