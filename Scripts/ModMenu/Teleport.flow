void Teleport()
{
    // Get player resource handle
    int playerResHandle = FLD_PC_GET_RESHND(0);

    // Velocity to add per frame
    const float ADD_VELOCITY_PER_PRESS = 3f;

    float velocity_x = 0f;
    float velocity_y = 0f;
    float velocity_z = 0f;
    int runs = 0;

    // Wait for all buttons to be released
    while(PAD_CHK_PRESS(PadButton.Any)) { SYNC(); }

    // Stop executing when Circle button is pressed
    while (!PAD_CHK_PRESS(PadButton.Circle))
    {
        // Get current player position
        float player_x = FLD_MODEL_GET_X_TRANSLATE(playerResHandle);
        float player_y = FLD_MODEL_GET_Y_TRANSLATE(playerResHandle);
        float player_z = FLD_MODEL_GET_Z_TRANSLATE(playerResHandle);
        // Get current player rotation
        float rot_x = FLD_MODEL_GET_X_ROTATE(playerResHandle);
        float rot_y = FLD_MODEL_GET_Y_ROTATE(playerResHandle);
        float rot_z = FLD_MODEL_GET_Z_ROTATE(playerResHandle);

        // Bring velocity closer to zero
        ++runs;
        float multiplier = 1f;
        if (runs > 5)
        {
            multiplier = 1f;
            runs = 0;
            velocity_x /= 3f;
            velocity_y /= 3f;
            velocity_z /= 3f;
        }

        // If a button is pressed...
        if (PAD_CHK_PRESS(PadButton.Any))
        {
            // Multiply velocity
            if (PAD_CHK_PRESS(PadButton.Cross))
                multiplier *= 3f;
            if (PAD_CHK_PRESS(PadButton.Triangle))
                multiplier *= 5f;
            // Divide velocity
            if (PAD_CHK_PRESS(PadButton.Square))
                multiplier /= 10f;
            // Move north/east/south/west
            if (PAD_CHK_PRESS(PadButton.Up) || ANALOG_ASTICK_CHECK(0, 0, 0)) 
                velocity_z += ADD_VELOCITY_PER_PRESS * multiplier;
            if (PAD_CHK_PRESS(PadButton.Right) || ANALOG_ASTICK_CHECK(0, 1, 0))
                velocity_x -= ADD_VELOCITY_PER_PRESS * multiplier;
            if (PAD_CHK_PRESS(PadButton.Down) || ANALOG_ASTICK_CHECK(0, 2, 0))
                velocity_z -= ADD_VELOCITY_PER_PRESS * multiplier;
            if (PAD_CHK_PRESS(PadButton.Left) || ANALOG_ASTICK_CHECK(0, 3, 0))
                velocity_x += ADD_VELOCITY_PER_PRESS * multiplier;
            // Move up/down
            if (PAD_CHK_PRESS(PadButton.R2))
                velocity_y += ADD_VELOCITY_PER_PRESS * multiplier;
            if (PAD_CHK_PRESS(PadButton.L2))
                velocity_y -= ADD_VELOCITY_PER_PRESS * multiplier;
            // Rotate on Y axis
            if (PAD_CHK_PRESS(PadButton.R1) || ANALOG_ASTICK_CHECK(1, 1, 0))
                FLD_MODEL_SET_ROTATE(playerResHandle, rot_x, rot_y + ADD_VELOCITY_PER_PRESS * multiplier, rot_z, 0);
            if (PAD_CHK_PRESS(PadButton.L1) || ANALOG_ASTICK_CHECK(1, 3, 0))
                FLD_MODEL_SET_ROTATE(playerResHandle, rot_x, rot_y - ADD_VELOCITY_PER_PRESS * multiplier, rot_z, 0);
        }

        // Move player in direction of velocity
        FLD_MODEL_SET_TRANSLATE(playerResHandle, player_x + velocity_x, player_y + velocity_y, player_z + velocity_z, 0);
        FLD_MODEL_SYNC_TRANSLATE(playerResHandle);
        FLD_MODEL_SYNC_ROTATE(playerResHandle);
        SYNC();
    }
}
